name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS
      run: |
        # Sync files to VPS
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='README.md' \
          -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
          ./ root@${{ secrets.VPS_HOST }}:/opt/lagente.do/
        
        # Deploy containers on VPS
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@${{ secrets.VPS_HOST }} << 'EOF'
          cd /opt/lagente.do
          
          # Stop containers
          docker compose down
          
          # Pull latest images and start containers
          docker compose up -d
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          sleep 30
          
          # Import database if it doesn't exist or is empty
          DB_COUNT=$(docker exec lagente-mysql mysql -u root -proot_password -e "SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = 'wordpress';" 2>/dev/null | tail -n 1 || echo "0")
          
          if [ "$DB_COUNT" -eq "0" ]; then
            echo "Importing database..."
            docker exec -i lagente-mysql mysql -u root -proot_password wordpress < docker-data/wordpress-database.sql
            
            # Update URLs to production
            docker exec lagente-mysql mysql -u root -proot_password wordpress -e "UPDATE wp_options SET option_value = 'https://lagente.do' WHERE option_name = 'home';"
            docker exec lagente-mysql mysql -u root -proot_password wordpress -e "UPDATE wp_options SET option_value = 'https://lagente.do' WHERE option_name = 'siteurl';"
          fi
          
          # Show container status
          docker ps
          
          # Test if site is responding
          curl -s -o /dev/null -w "WordPress Status: %{http_code}\n" http://localhost:8558
        EOF
        
    - name: Verify deployment
      run: |
        # Test the production site
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://lagente.do)
        echo "Production site status: $HTTP_CODE"
        if [ "$HTTP_CODE" -eq "200" ] || [ "$HTTP_CODE" -eq "302" ]; then
          echo "✅ Deployment successful! Site is accessible."
        else
          echo "❌ Deployment may have issues. HTTP code: $HTTP_CODE"
          exit 1
        fi